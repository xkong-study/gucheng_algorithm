🔹 可能的 Follow-up 问题

🟢 1. 你能用递归反转链表吗？

📌 关键点
递归实现的思路：
递归到链表的最后一个节点，然后逐层回溯修改 next 指针。
需要处理好 递归返回的 head 以及 链表尾节点的 next 置为 null。
📌 代码
javascript
function reverseList(head) {
    if (!head || !head.next) return head; // 递归终止条件
    let newHead = reverseList(head.next); // 递归反转后续链表
    head.next.next = head; // 让下一个节点指向当前节点
    head.next = null; // 断开原来的 next 连接
    return newHead; // 返回新的头结点
}
📌 时间 & 空间复杂度
时间复杂度：O(n)
空间复杂度：O(n)（递归栈的开销）

🟢 2. 你能用 O(1) 空间复杂度 反转链表吗？

📌 关键点
递归方法 额外占用 O(n) 的栈空间，如果链表非常大，可能会导致 栈溢出。
使用迭代法可以优化到 O(1) 的空间复杂度（双指针反转法）。

📌 代码

function reverseList(head) {
    let prev = null, curr = head;
    while (curr) {
        let next = curr.next;
        curr.next = prev;
        prev = curr;
        curr = next;
    }
    return prev;
}

📌 时间 & 空间复杂度
时间复杂度：O(n)
空间复杂度：O(1)

🟢 3. 如果链表很大，数据量超出内存怎么办？

📌 关键点
如果链表 数据量过大（比如有 10 亿个节点），单机处理可能会 超出内存。可以考虑 以下优化方案：

✅ 方法 1：外部存储 + 分块反转    

思路：    

把链表数据存入磁盘，分成多个小块（每块 M 个节点）。
从磁盘逐块加载，在内存中 反转每个小块，然后写回磁盘。
最终合并各个小块，重新连接链表。

适用场景：

超大链表，无法一次性加载进内存。

✅ 方法 2：MapReduce / 分布式计算

思路：
链表存储在多个机器上，使用 分布式存储（如 Hadoop / Spark）。
每台机器反转部分链表，然后合并。
最终进行归并操作，保证反转后的链表正确连接。

适用场景：
超大规模链表（百万 / 亿级数据）。
数据存储在分布式系统（如 Google BigTable、AWS S3）。

🟢 4. 反转链表 K 组分组反转（LeetCode 25）

📌 关键点
如果只需要反转整个链表，那是基本版。
如果要求每 K 个节点反转，则需要额外逻辑：
先统计当前链表长度，确保每 K 组都能被反转。
遍历链表，每次找到 K 个节点进行局部反转。
将反转后的部分拼接到最终链表。

javascript

function reverseKGroup(head, k) {
    if (!head || k <= 1) return head;

    let dummy = new ListNode(0);
    dummy.next = head;
    let prevGroupEnd = dummy;

    while (true) {
        let groupStart = prevGroupEnd.next;
        let kthNode = getKthNode(prevGroupEnd, k);
        if (!kthNode) break;

        let nextGroupStart = kthNode.next;
        reverse(groupStart, kthNode);

        prevGroupEnd.next = kthNode;
        groupStart.next = nextGroupStart;
        prevGroupEnd = groupStart;
    }

    return dummy.next;
}

function getKthNode(node, k) {
    while (node && k > 0) {
        node = node.next;
        k--;
    }
    return node;
}

function reverse(start, end) {
    let prev = null, curr = start;
    while (prev !== end) {
        let next = curr.next;
        curr.next = prev;
        prev = curr;
        curr = next;
    }
}

📌 时间 & 空间复杂度

时间复杂度：O(n)（每个节点只遍历一次）。
空间复杂度：O(1)（仅使用指针）。

**🟢 5. 反转 双向链表（Doubly Linked List）

📌 关键点
单链表反转时，只需要修改 next 指针。
双向链表需要同时修改 next 和 prev 指针。

📌 代码
javascript

function reverseDoublyLinkedList(head) {
    let curr = head, prev = null;

    while (curr) {
        let next = curr.next;
        curr.next = prev;
        curr.prev = next; // 关键点：交换 prev 指针
        prev = curr;
        curr = next;
    }

    return prev; // 返回新的头节点
}

📌 时间 & 空间复杂度
时间复杂度：O(n)
空间复杂度：O(1)

🔹 总结
Follow-up 题目	优化方法	时间复杂度	空间复杂度
递归反转链表	递归 + 回溯	O(n)	O(n)（递归栈开销）
O(1) 空间复杂度反转	迭代法（双指针）	O(n)	O(1)
超大数据链表	外部存储 / MapReduce	O(n)	O(1) - O(n)
K 组反转（LeetCode 25）	先分组 + 局部反转	O(n)	O(1)
反转双向链表	修改 prev + next	O(n)	O(1)

✅ 如果链表超大，无法放入内存，可以用 外部存储 + 分块反转 或 MapReduce 并行计算。
✅ 如果链表是动态数据流，可以用 在线算法维护部分反转结果。

🚀 不同 Follow-up 要求不同的优化策略，掌握这些思路，在面试中轻松应对！


🔹 当数字很大时，如何优化 findMissingNumber？
如果 数字很大（比如 10^9 或更大），单机内存可能无法存储完整的数组，甚至数组可能根本无法加载到内存。在这种情况下，我们需要 优化存储方式 和 搜索策略。

🟢 解决方案
方案	适用场景	时间复杂度	空间复杂度
方法 1：外部存储 + 分块二分查找	数据超大，存储在磁盘/数据库	O(log n)	O(1)
方法 2：哈希位图（Bitmap）	数字范围大，但内存有限	O(n)	O(N / 8) bits
方法 3：二进制计数法	找到唯一缺失的数，且所有数不重复	O(n)	O(1)
✅ 方法 1：外部存储 + 分块二分查找
适用场景：

数组数据量 非常大，存储在 数据库 / 磁盘 / 云存储 中，无法完全加载到内存。
可以顺序读取部分数据，但不能一次性加载所有数据。
📌 思路
假设数据存储在磁盘 / 分布式数据库，每次只能读取 一部分数据块（如 10^6 个）。
对整个数据进行二分查找，但每次只读取某一块数据。
判断缺失的数字在哪个块中：
如果 nums[mid] == mid + 1，缺失数字在 右侧，读取右半部分。
否则，缺失数字在 左侧，读取左半部分。
最终找到缺失的最小数字。
📌 代码示例
javascript
复制
编辑
function findMissingNumberExternalStorage(readBlock) {
    let left = 0, right = getTotalBlocks() - 1;

    while (left <= right) {
        let mid = Math.floor((left + right) / 2);
        let block = readBlock(mid); // 从磁盘或数据库读取块数据
        let first = block[0], last = block[block.length - 1];

        if (first === mid * block.length + 1 && last === (mid + 1) * block.length) {
            left = mid + 1; // 缺失的数字在右半部分
        } else {
            right = mid - 1; // 缺失的数字在左半部分
        }
    }

    // 读取最终的块
    let block = readBlock(left);
    for (let i = 0; i < block.length; i++) {
        if (block[i] !== left * block.length + i + 1) {
            return left * block.length + i + 1; // 找到缺失的数字
        }
    }
    return -1; // 没有缺失
}

// 模拟数据库或磁盘读取
function readBlock(blockIndex) {
    let blockSize = 1000000; // 每次读取 1,000,000 个数
    let start = blockIndex * blockSize + 1;
    let arr = Array.from({ length: blockSize }, (_, i) => start + i);

    if (start + 499999 === 500000) return arr.slice(0, 499999).concat(arr.slice(500000)); // 删除一个数
    return arr;
}

// 模拟总块数
function getTotalBlocks() {
    return Math.ceil(10**9 / 1000000); // 假设总数据量 10^9
}

console.log(findMissingNumberExternalStorage(readBlock)); // 输出缺失的数字
✅ 优势：

时间复杂度：O(log n)，只需二分读取 log(n / M) 次。
空间复杂度：O(1)，一次只读取 M 个数，节省内存。
🚀 适用于大规模数据，能在 磁盘 / 分布式存储 环境下高效查找！

✅ 方法 2：哈希位图（Bitmap）
适用场景：

数字范围 n 非常大（如 10^9），但 实际数据个数较少，可以用 位数组（bit array） 记录已存在的数。
适用于查找多个缺失的数字。
📌 思路
使用 n 位的 bit array（位图），每个数字对应一个 bit（0/1）。
遍历数据，将存在的数字置 1。
扫描 bit array，找到第一个 0 即为缺失的数字。
📌 代码示例
javascript
复制
编辑
function findMissingNumberBitmap(nums, n) {
    let bitArray = new Uint8Array(Math.ceil(n / 8)); // 创建 bit 数组，存储 n/8 字节

    // 标记出现的数字
    for (let num of nums) {
        let index = num - 1;
        bitArray[Math.floor(index / 8)] |= (1 << (index % 8));
    }

    // 查找第一个缺失的数字
    for (let i = 0; i < n; i++) {
        if ((bitArray[Math.floor(i / 8)] & (1 << (i % 8))) === 0) {
            return i + 1; // 缺失的最小数字
        }
    }
    return -1;
}

// 示例
console.log(findMissingNumberBitmap([1, 2, 3, 5, 6, 7], 10)); // 输出 4
✅ 优势：

时间复杂度：O(n)（遍历数组）。
空间复杂度：O(N / 8)（节省 8 倍存储）。
适用于大范围 n 的数据，但不能用于分布式存储。
✅ 方法 3：二进制计数法（适用于 0~N 数列）
适用场景：

仅有 一个数字缺失，且所有数字 唯一且不重复。
所有数字 0~N 出现，缺少其中一个。
📌 思路
计算 0~N 所有数字的二进制位 XOR（异或）。
计算数组中所有数字的 XOR。
两个 XOR 结果相减，即为缺失的数。
📌 代码示例
javascript
复制
编辑
function findMissingNumberXOR(nums, n) {
    let xorFull = 0, xorNums = 0;
    
    for (let i = 1; i <= n; i++) xorFull ^= i;
    for (let num of nums) xorNums ^= num;
    
    return xorFull ^ xorNums;
}

// 示例
console.log(findMissingNumberXOR([1, 2, 3, 5, 6, 7], 7)); // 输出: 4
✅ 优势：

时间复杂度：O(n)
空间复杂度：O(1)
适用于只有 一个 缺失的数字的情况。
🔹 总结
方法	适用场景	时间复杂度	空间复杂度
外部存储 + 分块二分查找	磁盘 / 分布式存储，单机无法加载	O(log n)	O(1)
哈希位图（Bitmap）	超大范围 n，数据较少	O(n)	O(N / 8)
二进制 XOR 计数	只有一个缺失数字	O(n)	O(1)
🚀 如果数据量超大，最优方案是 "外部存储 + 分块二分查找"！

