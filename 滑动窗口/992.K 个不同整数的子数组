套娃题，有点脑筋急转弯，见一次套路即可    

If a subarray has K distinct elements, then total subarrays will be n*(n+ 1)/2, which will include subarrays with k-1, k-2, k-3...1 distinct elements.     
example: [1,2,3] k=    
res: [11 121 [31 [1,21 12,31 11,2,31    
res=(1+3)*3/2=6    
res = 1 + 2 + 3 = 6    
高斯算法小于k都算等差数列求和公式   

这种方法是通过计算边界情况（即“最多包含”）来逼近我们想要的目标（即“恰好包含”），这是一种在计算复杂问题时常用的技巧。它避免了直接枚举和检查每个可能的子数组，从而提高了效率。       

```code
var subarraysWithKDistinct = function(nums, k) {
    return atMostKDistinct(nums, k) - atMostKDistinct(nums, k - 1);
};

function atMostKDistinct(nums, k) {
    let start = 0, count = 0;
    let freq = new Map();

    for (let end = 0; end < nums.length; end++) {
        freq.set(nums[end], (freq.get(nums[end]) || 0) + 1);

        while (freq.size > k) {
            freq.set(nums[start], freq.get(nums[start]) - 1);
            if (freq.get(nums[start]) === 0) {
                freq.delete(nums[start]);
            }
            start++;
        }
        count += end - start + 1;
    }

    return count;
}

```
