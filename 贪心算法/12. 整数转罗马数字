
这段代码的核心逻辑基于 罗马数字规则 中的 加减法原则。我们来一步步拆解为什么可以这样写，以及背后的逻辑：

1. 罗马数字的加减规则
罗马数字通常按从大到小的顺序排列，比如：

"XII" = 10 + 1 + 1 = 12
"XXVII" = 10 + 10 + 5 + 1 + 1 = 27
但在特殊情况下，当小值在大值前面时，表示需要减去小值，比如：

"IV" = 5 - 1 = 4
"IX" = 10 - 1 = 9
"CM" = 1000 - 100 = 900
所以核心规则就是：

如果当前罗马数字小于后一个数字，就减去它。
如果当前罗马数字大于等于后一个数字，就加上它。



排列顺序必须从大到小：

贪心算法需要优先匹配最大的数值，保证结果正确且表示简洁。
排列顺序错误的后果：

如果从小到大排列，代码会一直尝试匹配小的值，导致错误的罗马数字表示。

、、、
var intToRoman = function(num) {
    // 罗马数字映射表，从大到小排列
    const romanMap = [
        [1000, "M"],
        [900, "CM"],
        [500, "D"],
        [400, "CD"],
        [100, "C"],
        [90, "XC"],
        [50, "L"],
        [40, "XL"],
        [10, "X"],
        [9, "IX"],
        [5, "V"],
        [4, "IV"],
        [1, "I"]
    ];

    let result = "";

    // 贪心法：从大到小依次匹配数字
    for (const [value, roman] of romanMap) {
        while (num >= value) {
            result += roman; // 拼接罗马数字
            num -= value; // 减去对应的数值
        }
    }

    return result;
};

、、、
